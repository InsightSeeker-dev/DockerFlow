// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  name              String?     // Required
  username          String      @unique
  email             String      @unique // Required
  password          String      // Required
  emailVerified     DateTime?
  verificationToken String?     
  role              String      @default("admin")  // Ajout du rôle avec "admin" par défaut
  image             String?
  resetToken        String?     @unique
  resetTokenExpiry  DateTime?
  memoryLimit       Int         @default(2147483648)  // 2GB default
  storageLimit      Int         @default(10737418240) // 10GB default
  accounts          Account[]
  sessions          Session[]
  containers        Container[]
  storage           UserStorage[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Container {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  image       String
  status      String
  ports       Json?
  created     DateTime @default(now())
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserStorage {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  path        String
  size        Int
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  created     DateTime @default(now())
  updated     DateTime @updatedAt
}