// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String      @id @default(auto()) @map("_id") @db.ObjectId
  name                   String?     // Required
  username               String      @unique
  email                  String      @unique // Required
  password               String      // Required
  emailVerified         DateTime?   // Pour la vérification d'email
  verificationToken     String?     // Token de vérification
  verificationTokenExpires DateTime? // Date d'expiration du token de vérification
  role                   String      @default("admin")  // Par défaut, tous les utilisateurs sont admin
  status                 String      @default("active") // "active", "inactive", "suspended", "pending"
  image                  String?
  bio                    String?     // Biographie de l'utilisateur
  defaultRegistry        String      @default("docker.io") // Registry Docker par défaut
  autoUpdate            Boolean     @default(true)      // Mise à jour automatique des conteneurs
  resourceLimits        Json?       // Limites de ressources personnalisées
  notifications         Json?       // Préférences de notifications
  resetToken             String?     
  resetTokenExpiry       DateTime?
  cpuLimit               Int         @default(4000)    // 4 CPU cores par défaut pour les admins
  memoryLimit            Int         @default(8589934592)  // 8GB default pour les admins
  storageLimit           Int         @default(107374182400) // 100GB default pour les admins
  cpuThreshold           Int         @default(80)
  memoryThreshold        Int         @default(85)
  storageThreshold       Int         @default(90)
  accounts               Account[]
  sessions               Session[]
  containers             Container[]
  storage                UserStorage[]
  dockerImages           DockerImage[]
  resourceUsage          ResourceUsage[]
  alerts                 Alert[]
  terminalSessions       TerminalSession[]
  verificationTokens     VerificationToken[]
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  lastLogin              DateTime?

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Container {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  imageId     String
  status      String
  ports       Json?
  volumes     Json?
  env         Json?
  cpuLimit    Int
  memoryLimit Int
  created     DateTime @default(now())
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resourceUsage ResourceUsage[]

  @@map("containers")
}

model UserStorage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  path      String
  size      Int
  created   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_storage")
}

model DockerImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  name      String
  tag       String
  size      Int
  created   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("docker_images")
}

model ResourceUsage {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  containerId String?  @db.ObjectId
  container   Container? @relation(fields: [containerId], references: [id])
  cpuUsage    Float
  memoryUsage Float
  networkIO   Float
  timestamp   DateTime @default(now())

  @@map("resource_usage")
}

model Alert {
  id            String    @id @default(cuid())
  type          String    // error, warning, info, success
  title         String
  message       String
  source        String
  timestamp     DateTime  @default(now())
  acknowledged  Boolean   @default(false)
  acknowledgedAt DateTime?
  acknowledgedBy String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([type])
  @@index([timestamp])
  @@index([acknowledged])
}

model AlertRule {
  id          String    @id @default(cuid())
  name        String
  type        String    // cpu, memory, disk, network, container
  condition   String    // >, <, >=, <=, ==
  threshold   Float
  enabled     Boolean   @default(true)
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedBy   String?
  updatedAt   DateTime  @updatedAt

  @@index([type])
  @@index([enabled])
}

model TerminalSession {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  containerId String
  status    String
  created   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("terminal_sessions")
}

model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}